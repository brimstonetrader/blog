;; BLACKJACK simple rules
;;
;; https://www.pagat.com/banking/blackjack.html

(game
 (setup  
  ;; Set up the players
  (create players 2)
  (create teams (0) (1))
  
  ;; Create the deck source
  (create deck (game iloc STOCK) (deck (RANK (A, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, J, Q, K))
                                       (COLOR (RED (SUIT (HEARTS, DIAMONDS)))
                                              (BLACK (SUIT (CLUBS, SPADES)))))))          
 
 ;; Set up the game with 99 chips per person and 2 cards
 (do 
     (
      (shuffle (game iloc STOCK))
      (all player 'P
           (do 
               (
                (repeat 2
                        (move (top (game iloc STOCK))
                              (top ('P iloc HAND))))
                (set ('P sto CHIPS) 99))))
      (put points 'POINTSLOW 
           (
            ((RANK (A)) 1)
            ((RANK (K)) 10) 
            ((RANK (Q)) 10)
            ((RANK (J)) 10)
            ((RANK (TEN)) 10)
            ((RANK (NINE)) 9)
            ((RANK (EIGHT)) 8)
            ((RANK (SEVEN)) 7)
            ((RANK (SIX)) 6)
            ((RANK (FIVE)) 5)
            ((RANK (FOUR)) 4)
            ((RANK (THREE)) 3)
            ((RANK (TWO)) 2)))
      (put points 'POINTSHIGH 
           (
            ((RANK (A)) 11)
            ((RANK (K)) 10) 
            ((RANK (Q)) 10)
            ((RANK (J)) 10)
            ((RANK (TEN)) 10)
            ((RANK (NINE)) 9)
            ((RANK (EIGHT)) 8)
            ((RANK (SEVEN)) 7)
            ((RANK (SIX)) 6)
            ((RANK (FIVE)) 5)
            ((RANK (FOUR)) 4)
            ((RANK (THREE)) 3)
            ((RANK (TWO)) 2)))))
 
 ;; bidding
 (stage player
        (end 
         (all player 'P 
              (> ('P sto BET) 0)))
        
        (choice 
         (
          (any (range 1..5) 'B
               (set ((current player) sto BET) 'B)))))
 ;;TODO Let them bet more than 5
 ;;(choice (
 ;;   (set ((current player) sto BET) (any (range (1) ((current player) sto CHIPS))))
 ;;))
 
 ;; players get cards until FINISHED or BUSTED 
 (stage player
        (end 
         (all player 'P 
              (== ('P sto FINISHED) 1)))
        
        (choice 
         (
          
          ;; HIT
          ((or (< (sum ((current player) iloc HAND) using 'POINTSHIGH) 22)
               (< (sum ((current player) iloc HAND) using 'POINTSLOW) 22))
           (do 
               (
                (move (top (game iloc STOCK)) 
                      (top ((current player) iloc HAND)))
                
                ((or (< (sum ((current player) iloc HAND) using 'POINTSHIGH) 22)
                     (< (sum ((current player) iloc HAND) using 'POINTSLOW) 22))
                 (cycle next current)))))
          
          ;; STAY
          ((or (< (sum ((current player) iloc HAND) using 'POINTSHIGH) 22)
               (< (sum ((current player) iloc HAND) using 'POINTSLOW) 22))
           (set ((current player) sto FINISHED) 1))))
        
        (do 
            (
             
             ;; Determine if busted
             ((and (>= (sum ((current player) iloc HAND) using 'POINTSHIGH) 22)
                   (>= (sum ((current player) iloc HAND) using 'POINTSLOW) 22))
              (do 
                  (
                   (repeat all
                           (move (top ((current player) iloc HAND)) 
                                 (top (game vloc DISCARD))))
                   (dec ((current player) sto CHIPS) ((current player) sto BET))
                   (set ((current player) sto BET) 0)
                   (set ((current player) sto FINISHED) 1)))))))
 
 ;; Determine each way to score each hand
 (do 
     (
      (all player 'P
           (do 
               (
                ((< (sum ('P iloc HAND) using 'POINTSHIGH)
                    22)
                 (set ('P sto SCOREHAND) (sum ('P iloc HAND) using 'POINTSHIGH)))
                
                ((>= (sum ('P iloc HAND) using 'POINTSHIGH)
                     22)
                 (set ('P sto SCOREHAND) (sum ('P iloc HAND) using 'POINTSLOW))))))))
 
 ;; Find score for players
 (stage player
        (end 
         (all player 'P 
              (== ('P sto BET) 0)))
        
        ;; get correct scoring hand      
        (do 
            (
             ((> ((current player) sto SCOREHAND)
                 ((next player) sto SCOREHAND))
              (inc ((current player) sto CHIPS) ((current player) sto BET)))
             ((<= ((current player) sto SCOREHAND)
                  ((next player) sto SCOREHAND))
              (dec ((current player) sto CHIPS) ((current player) sto BET)))
             (repeat all 
                     (move (top ((current player) iloc HAND)) 
                           (top (game vloc DISCARD))))
             (set ((current player) sto BET) 0))))
 (scoring max ((current player) sto CHIPS)))
 
 
 ;; Hearts
;;
;; https://www.pagat.com/reverse/hearts.html

(game
 (setup  
  ;; Set up the players, 4 players each on their own team
  (create players 4)
  (create teams (0) (1) (2) (3))
  ;; Create the deck source
  (create deck (game vloc DISCARD) (deck (RANK (A, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, J, Q, K))
                                         (COLOR (RED (SUIT (HEARTS, DIAMONDS)))
                                                (BLACK (SUIT (CLUBS, SPADES)))))))       
 
 ;; Stages of the game
 (stage player
        (end 
         (any player 'P (!= ('P sto SCORE) 0))) ;; ONE ROUND ONLY, NOT THE FULL 100
        (do 
            (
             (repeat all
                     (move (top (game vloc DISCARD)) 
                           (top (game iloc STOCK))))
             (put points 'SCORE 
                  (
                   ((SUIT (HEARTS)) 1) 
                   ((RANK (Q)) (SUIT (SPADES)) 13)))
             (shuffle (game iloc STOCK))
             (all player 'P
                  (repeat 13
                          (move (top (game iloc STOCK))
                                (top ('P iloc HAND)))))
             (set (game sto BROKEN) 0)))
        
        ;; players play a round 13 times     
        (stage player
               (end 
                (all player 'P 
                     (== (size ('P iloc HAND)) 0)))
               
               ;; players play a hand once
               (stage player
                      (end 
                       (all player 'P 
                            (== (size ('P vloc TRICK)) 1)))
                      
                      (choice  
                       (         
                        ;; if first player and hearts not broken and have non-hearts cards
                        ;;   play one of these, remember it in the lead spot, and end your turn
                        ((and (== (size (game mem LEAD)) 0)
                              (== (game sto BROKEN) 0))
                         (any (filter ((current player) iloc HAND) 'NH 
                                      (!= (cardatt SUIT 'NH) HEARTS))
                              'C     
                              (do 
                                  (
                                   (move 'C  
                                         (top ((current player) vloc TRICK)))               
                                   (remember (top ((current player) vloc TRICK)) 
                                             (top (game mem LEAD)))))))
                        
                        ((and (== (size (game mem LEAD)) 0)
                              (== (game sto BROKEN) 0)
                              (== (size (filter ((current player) iloc HAND) 'NH 
                                                (!= (cardatt SUIT 'NH) HEARTS))) 0))
                         
                         (any ((current player) iloc HAND) 'C
                              (do 
                                  (
                                   (move 'C 
                                         (top ((current player) vloc TRICK)))
                                   (remember (top ((current player) vloc TRICK)) 
                                             (top (game mem LEAD)))))))
                        
                        ;; if first player and hearts broken
                        ;;   play any card, remember it in the lead spot, and end your turn
                        ((and (== (size (game mem LEAD)) 0)
                              (== (game sto BROKEN) 1))
                         (any ((current player) iloc HAND) 'C
                              (do 
                                  (
                                   (move 'C 
                                         (top ((current player) vloc TRICK)))
                                   (remember (top ((current player) vloc TRICK)) 
                                             (top (game mem LEAD)))))))
                        
                        ;; if following player and cannot follow SUIT
                        ;;   play any card, and end your turn
                        ((and (== (size (game mem LEAD)) 1)
                              (== (size (filter ((current player) iloc HAND) 'H 
                                                (== (cardatt SUIT 'H) 
                                                    (cardatt SUIT (top (game mem LEAD)))))) 0))
                         (any ((current player) iloc HAND) 'C
                              (move 'C 
                                    (top ((current player) vloc TRICK)))))
                        
                        ;; if following player and can follow SUIT
                        ;;   play any card that follows SUIT, and end your turn
                        (any (filter ((current player) iloc HAND) 'H 
                                     (== (cardatt SUIT 'H)
                                         (cardatt SUIT (top (game mem LEAD)))))
                             'C
                             ((== (size (game mem LEAD)) 1)
                              (move 'C 
                                    (top ((current player) vloc TRICK))))))))
               
               ;; after players play hand, computer wraps up trick
               (do ( 
                    ;; solidfy card recedence
                    (put points 'PRECEDENCE 
                         (
                          ((SUIT (cardatt SUIT (top (game mem LEAD)))) 100)
                          ((RANK (A)) 14)
                          ((RANK (K)) 13) 
                          ((RANK (Q)) 12)
                          ((RANK (J)) 11)
                          ((RANK (TEN)) 10)
                          ((RANK (NINE)) 9)
                          ((RANK (EIGHT)) 8)
                          ((RANK (SEVEN)) 7)
                          ((RANK (SIX)) 6)
                          ((RANK (FIVE)) 5)
                          ((RANK (FOUR)) 4)
                          ((RANK (THREE)) 3)
                          ((RANK (TWO)) 2)))
                    
                    ;; determine who won the hand, set them first next time, and give them a point
                    (forget (top (game mem LEAD)))
                    (cycle next (owner (max (union (all player 'P 
                                                        ('P vloc TRICK))) using 'PRECEDENCE)))
                    
                    ;; if winner played trump and trump not broken, trump is now broken
                    ((and (!= (size (filter (union (all player 'P 
                                                        ('P vloc TRICK))) 'PH  (== (cardatt SUIT 'PH) HEARTS)))
							  0)
                          (== (game sto BROKEN) 0))
                     (set (game sto BROKEN) 1))
                    
                    ;; discard all the played cards
                    (all player 'P
                         (move (top ('P vloc TRICK)) 
                               (top ((next player) vloc TRICKSWON)))))))
        
        ;; determine score
        (stage player
               (end 
                (all player 'P (== (size ('P vloc TRICKSWON)) 0)))
               (do 
                   (
                    
                    ((== (sum ((current player) vloc TRICKSWON) using 'SCORE) 26)
                     (dec ((current player) sto SCORE) 26))
                    
                    ((!= (sum ((current player) vloc TRICKSWON) using 'SCORE) 26)
                     (inc ((current player) sto SCORE) (sum ((current player) vloc TRICKSWON) using 'SCORE)))
                    
                    (repeat all
                            (move (top ((current player) vloc TRICKSWON))
                                  (top (game vloc DISCARD))))))))
 
 (scoring min ((current player) sto SCORE)))



;; Pairs
;;
;; https://cheapass.com/wp-content/uploads/2018/02/PairsCompanionBookWebFeb2018.pdf

(game
 (declare 4 'NUMP)
 (setup  
  (create players 'NUMP)
  (create teams (0) (1) (2) (3))
  
  ;; Create the deck source
  (repeat 1  (create deck (game iloc STOCK) (deck (VALUE   (ONE))))) 
  (repeat 2  (create deck (game iloc STOCK) (deck (VALUE   (TWO)))))        
  (repeat 3  (create deck (game iloc STOCK) (deck (VALUE (THREE)))))         
  (repeat 4  (create deck (game iloc STOCK) (deck (VALUE  (FOUR)))))       
  (repeat 5  (create deck (game iloc STOCK) (deck (VALUE  (FIVE)))))        
  (repeat 6  (create deck (game iloc STOCK) (deck (VALUE   (SIX)))))       
  (repeat 7  (create deck (game iloc STOCK) (deck (VALUE (SEVEN)))))         
  (repeat 8  (create deck (game iloc STOCK) (deck (VALUE (EIGHT)))))         
  (repeat 9  (create deck (game iloc STOCK) (deck (VALUE  (NINE)))))       
  (repeat 10 (create deck (game iloc STOCK) (deck (VALUE   (TEN))))))        
 
 ;; Assign points for cards, remove 5 cards from game
 (do 
     (
      (put points 'POINTS 
           (
            ((VALUE (TEN)) 10)
            ((VALUE (NINE)) 9)
            ((VALUE (EIGHT)) 8)
            ((VALUE (SEVEN)) 7)
            ((VALUE (SIX)) 6)
            ((VALUE (FIVE)) 5)
            ((VALUE (FOUR)) 4)
            ((VALUE (THREE)) 3)
            ((VALUE (TWO)) 2)
            ((VALUE (ONE)) 1)))
      
      (shuffle (game iloc STOCK))
      (repeat 5 
              (move (top (game iloc STOCK))
                    (top (game iloc THROWOUT))))))
 
 ;; Play the game until one player has enough points to lose
 (stage player
        (end 
         (any player 'P 
              (>= (sum ('P vloc SCORING) using 'POINTS) (+ (// 60 'NUMP) 1))))
        
        (do 
            (
             
             ;; Reset the deck if not enough cards
             ((< (size (game iloc STOCK)) 'NUMP)
              (do 
                  (
                   (repeat all
                           (move (top (game iloc THROWOUT))
                                 (top (game iloc STOCK))))
                   (repeat all
                           (move (top (game vloc DISCARD))
                                 (top (game iloc STOCK))))
                   (shuffle (game iloc STOCK))
                   (repeat 5 
                           (move (top (game iloc STOCK))
                                 (top (game iloc THROWOUT)))))))
             
             ;; Give each player a card
             (all player 'P 
                  (move (top (game iloc STOCK))
                        (top ('P vloc HAND))))
             
             ;; TODO Stage here, find the player with smallest card
             ;; if tied, deal new card and try again
             ;; Stage, for tied players if dealt a pair, then discard and do it again
             (cycle current (owner (min (union (all player 'P 
                                                    ('P vloc HAND))) using 'POINTS)))))
        
        ;; Players take turns pressing their luck until one has pair or stops
        (stage player
               (end 
                (== (game sto FINISHED) 1))
               
               (do   
                   (
                    
                    ;; Reset the deck if not enough cards
                    ((== (size (game iloc STOCK)) 0)
                     (do 
                         (
                          (repeat all
                                  (move (top (game iloc THROWOUT))
                                        (top (game iloc STOCK))))
                          (repeat all
                                  (move (top (game vloc DISCARD))
                                        (top (game iloc STOCK))))
                          (shuffle (game iloc STOCK))
                          (repeat 5 
                                  (move (top (game iloc STOCK))
                                        (top (game iloc THROWOUT)))))))))
               
               ;; players flip a card or bow out
               (choice 
                (
                 (do 
                     (
                      (move (actual (min (union (all player 'P ('P vloc HAND))) using 'POINTS))
                            (top ((current player) vloc SCORING)))
                      (set (game sto FINISHED) 1)))
                 
                 (move (top (game iloc STOCK))
                       (top ((current player) vloc HAND)))))
               
               ;; if pair, end the round
               ;; current player is similar to how all players was used previously, is this ok?
               (do 
                   (
                    ((> (size (tuples 2 ((current player) vloc HAND) using 'POINTS)) 0)
                     (do 
                         (
                          (set (game sto FINISHED) 1)
                          (move (actual (top (top (tuples 2 ((current player) vloc HAND) using 'POINTS))))
                                (top ((current player) vloc SCORING)))))))))
        
        ;; Move all cards back to the discard pile
        (do 
            (
             (all player 'P
                  (repeat all
                          (move (top ('P vloc HAND))
                                (top (game vloc DISCARD)))))
             (set (game sto FINISHED) 0))))
 
 ;; Player with the lowest sum of points in their scoring pile wins
 (scoring min (sum ((current player) vloc SCORING) using 'POINTS)))
 
 
 ;; SPADES in the GDL
(game
 
 (setup 
  ;; Set up the players, 2 teams of 2 players, alternating
  (create players 4)
  (create teams (0, 2) (1, 3))
  
  ;; Create the deck source
  (create deck (game vloc DISCARD) (deck (RANK (A, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, J, Q, K))
                                         (COLOR (RED (SUIT (HEARTS, DIAMONDS)))
                                                (BLACK (SUIT (CLUBS, SPADES))))))            
  )
 
 ;; Stages of the game
 (stage player
        (end 
         (any team 'T 
              (!= ('T sto SCORE) 0)))
        (do 
            (
             (repeat all
                     (move (top (game vloc DISCARD)) 
                           (top (game iloc STOCK))))
             (remember (top (filter (game iloc STOCK) 'S (== (cardatt SUIT 'S) SPADES)))
                       (top (game mem TRUMP)))
             (shuffle (game iloc STOCK))
             (set (game sto BROKEN) 0)
             (all player 'P
                  (do 
                      (
                       (repeat 13
                               (move (top (game iloc STOCK))
                                     (top ('P iloc HAND))))
                       (set ('P sto TRICKSWON) 0)
                       (set ('P sto BID) 14))))))
        
        ;; bidding for number of tricks expected
        (stage player
               (end 
                (all player 'P 
                     (<= ('P sto BID) 13)))
               (choice 
                (
                 (any (range 1..5) 'B
                      (do (
                           (set ((current player) sto BID) 'B)
                           (inc ((team (current player)) sto BID) 'B)))))))
        
        ;; players play a round 13 times     
        (stage player
               (end 
                (all player 'P 
                     (== (size ('P iloc HAND)) 0)))
               
               ;; players play a hand once
               (stage player
                      (end 
                       (all player 'P 
                            (> (size ('P vloc TRICK)) 0)))
                      
                      (choice 
                       
                       (
                        ;; if following player and cannot follow SUIT
                        ;;   play any card, and end your turn
                        ((and (== (size (game mem LEAD)) 1)
                              (== (size (filter ((current player) iloc HAND) 'H (== (cardatt SUIT 'H) 
                                                                                    (cardatt SUIT (top (game mem LEAD)))))) 0))
                         (any ((current player) iloc HAND) 'C
                              (move 'C 
                                    (top ((current player) vloc TRICK)))))
                        
                        ;; if following player and can follow SUIT
                        ;;   play any card that follows SUIT, and end your turn
                        ((== (size (game mem LEAD)) 1)
                         (any (filter ((current player) iloc HAND) 'S (== (cardatt SUIT 'S)
                                                                          (cardatt SUIT (top (game mem LEAD))))) 
                              'C
                              (move 'C 
                                    (top ((current player) vloc TRICK)))))
                        
                        ;; if first player and spades not broken and have non-spades cards
                        ;;   play one of these, remember it in the lead spot, and end your turn
                        ((and (== (size (game mem LEAD)) 0)
                              (== (game sto BROKEN) 0))
                         (any (spades ((current player) iloc HAND) 'S (!= (cardatt SUIT 'S)
                                                                          (cardatt SUIT (top (game mem TRUMP))))) 
                              'C
                              
                              (do (
                                   (move 'C 
                                         (top ((current player) vloc TRICK)))
                                   (remember (top ((current player) vloc TRICK)) 
                                             (top (game mem LEAD)))))))
                        
                        ;; if first player and spades broken
                        ;;   play any card, remember it in the lead spot, and end your turn
                        ((and (== (size (game mem LEAD)) 0)
                              (== (game sto BROKEN) 1))
                         (do 
                             (
                              (any ((current player) iloc HAND) 'C
                                   (move 'C 
                                         (top ((current player) vloc TRICK))))
                              (remember (top ((current player) vloc TRICK)) 
                                        (top (game mem LEAD))))))
                        
                        ((and (== (size (game mem LEAD)) 0)
                              (== (game sto BROKEN) 0)
                              (== (size (filter ((current player) iloc HAND) 'S (!= (cardatt SUIT 'S) 
                                                                                    (cardatt SUIT (top (game mem TRUMP)))))) 0))
                         (any ((current player) iloc HAND) 'C
                              (do 
                                  (
                                   (move 'C
                                         (top ((current player) vloc TRICK)))
                                   (remember (top ((current player) vloc TRICK)) 
                                             (top (game mem LEAD))))))))))
               
               
               ;; after players play hand, computer wraps up trick
               (do 
                   (
                    ;; solidfy card recedence
                    (put points 'PRECEDENCE 
                         (
                          ((SUIT (cardatt SUIT (top (game mem TRUMP)))) 200)
                          ((SUIT (cardatt SUIT (top (game mem LEAD)))) 100)
                          ((RANK (A)) 14)
                          ((RANK (K)) 13) 
                          ((RANK (Q)) 12)
                          ((RANK (J)) 11)
                          ((RANK (TEN)) 10)
                          ((RANK (NINE)) 9)
                          ((RANK (EIGHT)) 8)
                          ((RANK (SEVEN)) 7)
                          ((RANK (SIX)) 6)
                          ((RANK (FIVE)) 5)
                          ((RANK (FOUR)) 4)
                          ((RANK (THREE)) 3)
                          ((RANK (TWO)) 2)))
                    
                    ;; determine who won the hand, set them first next time, and give them a point
                    (forget (top (game mem LEAD)))
                    (cycle next (owner (max (union (all player 'P 
                                                        ('P vloc TRICK))) using 'PRECEDENCE)))
                    (inc ((next player) sto TRICKSWON) 1)
                    (inc ((team (next player)) sto TRICKSWON) 1)
                    
                    ;; if winner played trump and trump not broken, trump is now broken
                    ((and (== (cardatt SUIT (top ((next player) vloc TRICK))) 
                              (cardatt SUIT (top (game mem TRUMP))))
                          (== (game sto BROKEN) 0))
                     (set (game sto BROKEN) 1))
                    
                    ;; discard all the played cards
                    (all player 'P
                         (move (top ('P vloc TRICK)) 
                               (top (game vloc DISCARD)))))))
        
        ;; determine team score
        (stage team
               (end 
                (all player 'P 
                     (== ('P sto TRICKSWON) 0)))
               (do 
                   (
                    ;; team made their cumulative bid, score positive points
                    ((>= ((current team) sto TRICKSWON) 
                         ((current team) sto BID))
                     (do (
                          (inc ((current team) sto SCORE) (* 10 ((current team) sto BID)))
                          (inc ((current team) sto BAGS) (- ((current team) sto TRICKSWON) 
                                                            ((current team) sto BID))))))
                    
                    ;; team did not make their cumulative bid, score negative points
                    ((< ((current team) sto TRICKSWON)
                        ((current team) sto BID))
                     (dec ((current team) sto SCORE) (* 10 ((current team) sto BID))))
                    
                    ;; record bags if over 10
                    (dec ((current team) sto SCORE) (* 100 (// ((current team) sto BAGS) 10)))
                    (set ((current team) sto BAGS) (% ((current team) sto BAGS) 10))
                    (set ((current team) sto TRICKSWON) 0)
                    (set ((current team) sto BID) 0)
                    (all (current team) 'R
                         (set ('R sto TRICKSWON) 0))))))
 
 (scoring max ((team (current player)) sto SCORE)))

;; Fuck it, Crazier Eights 
;;
;; https://www.pagat.com/eights/crazy8s.html but Joker's 

(game
 (setup  
  ;; Set up the players, 4 players each on their own team
  (create players 4)
  (create teams (0) (1) (2) (3))
  
  ;; Create the deck source
  (create deck (game iloc STOCK) (deck (RANK (ACE, TWO, THREE, FOUR, FIVE, SIX, 
                                              SEVEN, EIGHT, NINE, TEN, J, Q, K))
                                       (COLOR (RED (SUIT (HEARTS, DIAMONDS)))
                                              (BLACK (SUIT (CLUBS, SPADES))))))) 
 ;; 8 is of value 10! = 10*9*8*... 
 (do 
     (
      (put points 'SCORE 
           (
            ((RANK (A)) 1)
            ((RANK (K)) 10) 
            ((RANK (Q)) 10)
            ((RANK (J)) 10)
            ((RANK (TEN)) 10)
            ((RANK (NINE)) 9)
            ((RANK (EIGHT)) 3628800)
            ((RANK (SEVEN)) 7)
            ((RANK (SIX)) 6)
            ((RANK (FIVE)) 5)
            ((RANK (FOUR)) 4)
            ((RANK (THREE)) 3)
            ((RANK (TWO)) 2)))
      
      ;; Shuffle and give each player 5 cards
      (shuffle (game iloc STOCK))
      (all player 'P
           (repeat 5
                   (move (top (game iloc STOCK))
                         (top ('P iloc HAND)))))
      
      ;; Start the discard pile
      (move (top (game iloc STOCK))
            (top (game vloc DISCARD)))))
 
 ;; Game over when any player has 0 cards in their hand
 (stage player
        (end 
         (any player 'P (== (size ('P iloc HAND)) 0)))
        
        ;; player makes a choice
        (choice 
         (
          
          ;; Play a card that matches suit or rank on top of discard
          (any (filter ((current player) iloc HAND) 'NH 
                       (or (== (mod (score () using 'SCORE) ())
                               (cardatt SUIT (top (game vloc DISCARD))))
                           (== (cardatt RANK 'NH)
                               (cardatt RANK (top (game vloc DISCARD)))))) 
               'C
               (move 'C 
                     (top (game vloc DISCARD))))
          
          ;; Draw from the Stock
          ((> (size (game iloc STOCK)) 0)
           (move (top (game iloc STOCK))
                 (top ((current player) iloc HAND))))
          
          ;; Pass and wait for the stock to be refilled
          ((== (size (game iloc STOCK)) 0)
           (turn pass))))
        
        ;; if STOCK is empty, resupply from discard
        (do 
            (             
             ((== (size (game iloc STOCK)) 0)
              (do 
                  (
                   (move (top (game vloc DISCARD))
                         (top (game vloc TEMP)))
                   (repeat all 
                           (move (top (game vloc DISCARD))
                                 (top (game iloc STOCK))))
                   (move (top (game vloc TEMP))
                         (top (game vloc DISCARD)))
                   (shuffle (game iloc STOCK))))))))
 
 ;; Player with the smallest hand size wins
 (scoring min (sum ((current player) iloc HAND) using 'SCORE)))

